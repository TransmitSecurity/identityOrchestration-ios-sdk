// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IdentityOrchestration
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import IdentityOrchestration
import Swift
import TSCoreSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public struct TSIdoConfiguration {
  public init(configurationFileName: Swift.String)
}
public struct TSIdoInitJourneyOptions {
  public var serverPath: Swift.String
  public let resource: Swift.String?
  public let pollingTimeout: Swift.Int?
  public let locale: Swift.String?
  public init(serverPath: Swift.String, resource: Swift.String? = nil, pollingTimeout: Swift.Int? = nil, locale: Swift.String? = nil)
}
public struct TSIdoStartJourneyOptions {
  public let additionalParams: [Swift.String : Any]?
  public let flowId: Swift.String?
  public init(additionalParams: [Swift.String : Any]?, flowId: Swift.String? = nil)
}
public enum TSIdoJourneyError : Swift.Error {
  case notInitialized
  case noActiveJourney
  case networkError
  case clientResponseNotValid
  case serverError((any Swift.Error)?)
  case initializationError
  case invalidCredentials
  case expiredOTPPasscode
  case missingRequestIdInApprovalPayload
}
public struct TSIdoSdkError : Swift.Error {
  public let errorCode: IdentityOrchestration.TSIdoJourneyError
  public let description: Swift.String
  public let data: Any?
}
extension IdentityOrchestration.TSIdoClientResponseOptionType {
  public var id: Swift.String {
    get
  }
}
extension IdentityOrchestration.TSIdoClientResponseOptionType : Swift.Equatable {
  public static func == (lhs: IdentityOrchestration.TSIdoClientResponseOptionType, rhs: IdentityOrchestration.TSIdoClientResponseOptionType) -> Swift.Bool
}
public enum TSIdoClientResponseOptionType : Swift.Codable {
  case clientInput
  case cancel
  case fail
  case resend
  case custom(id: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension IdentityOrchestration.TSIdoJourneyActionType : Swift.CustomStringConvertible, Swift.Equatable {
  public var description: Swift.String {
    get
  }
}
extension IdentityOrchestration.TSIdoJourneyActionType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum TSIdoJourneyActionType : Swift.Codable {
  case success
  case rejection
  case information
  case debugBreak
  case waitForAnotherDevice
  case drsTriggerAction
  case identityVerification
  case webAuthnRegistration
  case registerDeviceAction
  case validateDeviceAction
  case nativeBiometricsRegistration
  case nativeBiometricsAuthenticaton
  case emailOTPAuthentication
  case smsOTPAuthentication
  case emailValidation
  case smsValidation
  case deleteMobileBiometrics
  case totpRegistration
  case totpSigningTransaction
  case webAuthnTransactionSigning
  case nativeBiometricsTransactionSigning
  case custom(name: Swift.String)
}
public protocol TSIdoClientResponseOption : Swift.Decodable, Swift.Encodable {
  var type: IdentityOrchestration.TSIdoClientResponseOptionType { get }
  var id: Swift.String { get }
  var label: Swift.String { get }
  var schema: [Any]? { get }
}
public protocol TSIdoServiceResponse {
  var data: [Swift.String : Any]? { get }
  var errorData: IdentityOrchestration.TSIdoSdkError? { get }
  var journeyStepId: IdentityOrchestration.TSIdoJourneyActionType? { get }
  var clientResponseOptions: [Swift.String : any IdentityOrchestration.TSIdoClientResponseOption]? { get }
  var token: Swift.String? { get }
}
public typealias TSIdoGenerateDebugPinCompletion = (Swift.Result<Swift.String, IdentityOrchestration.TSIdoJourneyError>) -> Swift.Void
extension Swift.Encodable {
  public var toDictionary: [Swift.String : Any]? {
    get
  }
}
public protocol TSIdoDelegate : AnyObject {
  func TSIdoDidReceiveResult(_ result: Swift.Result<any IdentityOrchestration.TSIdoServiceResponse, IdentityOrchestration.TSIdoJourneyError>)
}
@_hasMissingDesignatedInitializers final public class TSIdo : TSCoreSDK.TSLogConfigurable {
  public static var delegate: (any IdentityOrchestration.TSIdoDelegate)? {
    get
    set(newDelegate)
  }
  public static func initialize(clientId: Swift.String, options: IdentityOrchestration.TSIdoInitJourneyOptions)
  public static func initializeSDK(configuration: IdentityOrchestration.TSIdoConfiguration? = nil) throws
  public static func startJourney(journeyId: Swift.String, options: IdentityOrchestration.TSIdoStartJourneyOptions? = nil)
  public static func submitClientResponse(clientResponseOptionId: IdentityOrchestration.TSIdoClientResponseOptionType, data: [Swift.String : Any]? = nil)
  public static func generateDebugPin(_ completion: @escaping IdentityOrchestration.TSIdoGenerateDebugPinCompletion)
  @objc deinit
}
